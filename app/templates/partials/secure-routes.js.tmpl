  .run(function ( $rootScope, $mdMedia, Parse, STATES, $timeout, $mdDialog, tmAccounts, $state, tmLocalStorage, CACHEKEYS, $log ) {

    var user = Parse.User.current();

    if (user) {
      tmAccounts
      .getUserRoles(user)
      .then(function () {
        // success
      }, function () {
        tmLocalStorage.clear();
        Parse.User.logOut();
        $state.go('login');
        $mdDialog.show(
          $mdDialog.alert()
            .title('You account is missing or something is wrong with authorisation.')
            .content('Please try loggin in again or contacting support.')
            .ok('Close')
        );
      });
    }
    else {
      $state.go('login');
    }

    ////////////////////////

    $rootScope.$on('$stateChangeStart',
      function(event, toState, toParams, fromState, fromParams){
        //////////////////////// ACCESS CONTROL ////////////////////////////
        var user = Parse.User.current(), userRoles, confirmAlert;
        // If no current user, only states with 'public' access can be accessed
        if (!user)
        {
          stateAuth(['public']);
        }

        // Get roles from cache
        if (user)
        {
          userRoles = tmLocalStorage.getObject(CACHEKEYS.user.roles.key, []);

          // if cache roles have gone missing or it is referencing the wrong cache key.
          if (!userRoles.length)
          {
            $log.error('Cached User roles are returning an empty array. Check localStorage, and application cacheKey references are correct.');

            confirmAlert = $mdDialog.confirm()
              .title('Something went wrong!')
              .content('Please try logging in again, or contact support if the problem persists.')
              .ok('Close');

            $mdDialog.show(confirmAlert)
            .then(function() {
              tmLocalStorage.clear();
              Parse.User.logOut();
              $state.go('login');
            });
          }
          else
          {
            stateAuth(userRoles);
          }
        }

        function stateAuth(userRoles) {
          var allowedRoles = STATES[toState.name].accessControl.allow;

          function checkAccess(){
            var concatArray = userRoles.concat(allowedRoles).sort();

            for (var i = 1; i < concatArray.length; i++)
            {
              // checks for duplicates - if so, access is granted
              if (concatArray[i - 1] === concatArray[i])
              {
                return;
              }
              else if (i === concatArray.length - 1)
              {
                redirect();
              }
            }
          }
          checkAccess();
        }

        function redirect() {
          // Wrapped in a timeout to fix angular digest issue when changing state like this.
          if (fromState.name !== '')
          {
            $timeout(function (){
              $state.go(fromState.name);
            }, 0);
          }
          else if (!user && fromState.name === '')
          {
            $timeout(function (){
              $state.go('login');
            }, 0);
          }
          else if (user && fromState.name === '')
          {
            $timeout(function (){
              $state.go('app.activity-feed');
            }, 0);
          }
        }
      });
  })
